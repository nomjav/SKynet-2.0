#pragma checksum "C:\Work\Estrats\Skynet 2.0\Skynet.Web\Views\Home\_MultiEstimates.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "625d3df3e01d9bc26931209685a3034085a5d1fc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home__MultiEstimates), @"mvc.1.0.view", @"/Views/Home/_MultiEstimates.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/_MultiEstimates.cshtml", typeof(AspNetCore.Views_Home__MultiEstimates))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Work\Estrats\Skynet 2.0\Skynet.Web\Views\_ViewImports.cshtml"
using Skynet.Web;

#line default
#line hidden
#line 2 "C:\Work\Estrats\Skynet 2.0\Skynet.Web\Views\_ViewImports.cshtml"
using Skynet.Web.Models;

#line default
#line hidden
#line 1 "C:\Work\Estrats\Skynet 2.0\Skynet.Web\Views\Home\_MultiEstimates.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"625d3df3e01d9bc26931209685a3034085a5d1fc", @"/Views/Home/_MultiEstimates.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0a3c382a9203d8a39d7ac0f9908291a86ad1608b", @"/Views/_ViewImports.cshtml")]
    public class Views_Home__MultiEstimates : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/site.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "4", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("PartsForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(21, 47, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8c657cf667874aab98f044ca29e18cab", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(68, 844, true);
            WriteLiteral(@"
<button type=""button"" id=""MultiEstimates"" onclick=""CreateEditEstimate(0, false);"" class=""btn btn-success"">Create Estimate</button>

<div>
    <br />
    <input type=""hidden"" id=""EstimateNumber"" name=""EstimateNumber"" />
    <table class=""table table-advance"">
        <thead>
            <tr>
                <th>Estimate No.</th>
                <th>Label</th>
                <th>Total</th>
                <th>Created On</th>
                <th>Approved Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody class=""tableBody"" id=""estimatesBody""></tbody>
    </table>
</div>
<div id=""newEstimate"" style=""display:none"">
    <div style=""text-align:center""><span style=""font-size:11px; color:#d33838;"" id=""stateExempt""></span></div>

    <div id=""PartsPanel"" padding: 10px 0;"">
        ");
            EndContext();
            BeginContext(912, 7263, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e44d82ffa4b647a0afa7677dcc375c4b", async() => {
                BeginContext(933, 206, true);
                WriteLiteral("\r\n            <table style=\"table-layout:fixed;\">\r\n                <tr>\r\n                    <td colspan=\"2\">\r\n                        <input type=\"hidden\" id=\"PartIdOfEstimate\" name=\"PartIdOfEstimate\" />\r\n");
                EndContext();
                BeginContext(1232, 1273, true);
                WriteLiteral(@"                        <input type=""hidden"" id=""TotalPartQuantity"" name=""TotalPartQuantity"" />
                        <label id=""lblPartFound"" style=""display: none;""></label>
                        <input type=""hidden"" id=""APTAPrice"" name=""APTAPrice"" />
                    </td>
                </tr>
                <tr>
                    <td>Estimate Label</td>
                    <td colspan=""3"">

                        <div class=""input-group"">
                            <input class=""form-control"" type=""text"" id=""estimateLabel"" name=""estimteLabel"" style=""width: 400px;"" />
                            <div class=""input-group-append"">
                                <button id=""btnEstLbl"" class=""btn btn-success"" style=""height:25px;"" onclick=""saveEstimateLabel();""><i class=""fa fa-save""></i></button>
                            </div>
                        </div>
                    </td>

                </tr>
                <tr>
                    <td colspan=""4"">
             ");
                WriteLiteral("           <hr />\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Type</td>\r\n                    <td>\r\n                        <select class=\"form-control\" id=\"PartType\">\r\n                            ");
                EndContext();
                BeginContext(2505, 32, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0a5a4d0b1de8421d861b62deee5775fe", async() => {
                    BeginContext(2523, 5, true);
                    WriteLiteral("Parts");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2537, 30, true);
                WriteLiteral("\r\n                            ");
                EndContext();
                BeginContext(2567, 32, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "762d1847f38d4cd6835cc8008745eecc", async() => {
                    BeginContext(2585, 5, true);
                    WriteLiteral("Labor");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2599, 30, true);
                WriteLiteral("\r\n                            ");
                EndContext();
                BeginContext(2629, 38, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a54eb94ebf934cec99e7077f0aa1fadb", async() => {
                    BeginContext(2647, 11, true);
                    WriteLiteral("Trip Charge");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2667, 30, true);
                WriteLiteral("\r\n                            ");
                EndContext();
                BeginContext(2697, 32, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "931d3ed23a2e42fbbe53b69ce076d2d8", async() => {
                    BeginContext(2715, 5, true);
                    WriteLiteral("Other");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2729, 185, true);
                WriteLiteral("\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n                <tr id=\"pnmbr\">\r\n                    <td>Part No:</td>\r\n                    <td>\r\n");
                EndContext();
                BeginContext(2987, 26, true);
                WriteLiteral("\r\n                        ");
                EndContext();
                BeginContext(3015, 933, false);
#line 71 "C:\Work\Estrats\Skynet 2.0\Skynet.Web\Views\Home\_MultiEstimates.cshtml"
                    Write(Html.Kendo().AutoComplete()
                        .Name("Name") // The name of the AutoComplete is mandatory. It specifies the "id" attribute of the AutoComplete.
                        .DataTextField("PartName")// Specify which property of the Product to be used by the AutoComplete.
                        .HtmlAttributes(new { style = "width:100%;" })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("LoadParts", "Home").Data("sendValue"); // Set the Action and Controller names.
                            })
                            .ServerFiltering(true); // If true, the DataSource will not filter the data on the client.
                        }).Events(e => e
                        .Change("LoadParts")
                        )
                        );

#line default
#line hidden
                EndContext();
                BeginContext(3949, 2520, true);
                WriteLiteral(@"
                    </td>
                </tr>
                <tr id=""desc"" style=""display:none;"">
                    <td>Description</td>
                    <td>
                        <textarea style=""width: 98%; height: 60px;"" id=""PartDescription"" name=""PartDescription"" class=""required form-control""></textarea>
                    </td>
                </tr>
                <tr id=""pm"">
                    <td>
                        Margin %:
                    </td>
                    <td>
                        <input type=""text"" id=""partsMarkup"" name=""partsMarkup"" class=""onlyNumberAllowed form-control"" />
                    </td>
                </tr>
                <tr id=""pd"">
                    <td>
                        Discount %:
                    </td>
                    <td>
                        <input type=""text"" id=""partsDiscount"" name=""partsDiscount"" class=""onlyNumberAllowed form-control"" />
                    </td>

                    <td clas");
                WriteLiteral(@"s=""purchasePrice"">Purchase Price:</td>
                    <td>
                        <input type=""text"" id=""purchasePrice"" name=""purchasePrice"" class=""purchasePrice onlyNumberAllowed form-control"" disabled=""disabled"" />
                    </td>
                </tr>
                <tr style=""display:none;"">
                    <td>Labor Cost:</td>
                    <td>
                        <input type=""text"" id=""laborOrPartCost"" name=""laborOrPartCost"" class=""onlyNumberAllowed form-control"" />

                    </td>
                </tr>
                <tr id=""pc"" style=""display:none;"">
                    <td>Part Cost:</td>
                    <td>
                        <input type=""text"" id=""NewPartCost"" name=""NewPartCost"" class=""onlyNumberAllowed form-control"" />

                    </td>
                </tr>
                <tr style=""display:none;"">
                    <td>Cost:</td>
                    <td>
                        <input type=""text"" id=""TripCost");
                WriteLiteral(@""" name=""TripCost"" class=""onlyNumberAllowed form-control"" />
                    </td>
                </tr>
                <tr style=""display:none;"">
                    <td>Cost:</td>

                    <td>
                        <input type=""text"" id=""OtherCost"" name=""OtherCost"" class=""onlyNumberAllowed form-control"" />
                    </td>
                </tr>
                <tr>
                    <td>Price:</td>
                    <td>
");
                EndContext();
                BeginContext(6684, 1366, true);
                WriteLiteral(@"                        <input type=""text"" id=""PartPrice"" maxlength=""8"" name=""PartPrice"" class=""calculator number required form-control"" autocomplete=""Off"" />
                    </td>
                    <td class=""sellingPrice"">Selling Price:</td>
                    <td>
                        <input type=""text"" id=""sellingPrice"" name=""sellingPrice"" class=""sellingPrice onlyNumberAllowed form-control"" disabled=""disabled"" />
                    </td>
                </tr>

                <tr>
                    <td>Quantity</td>
                    <td>
                        <input type=""text"" id=""PartQuantity"" maxlength=""8"" name=""PartQuantity"" class=""number required form-control"" />
                    </td>

                    <td class=""profitOnParts"">Profit:</td>
                    <td>
                        <input type=""text"" id=""PartPofit"" name=""PartPofit"" class=""profitOnParts onlyNumberAllowed form-control"" disabled=""disabled"" />
                    </td>
                </t");
                WriteLiteral(@"r>

            </table>
            <br />
            <div class=""buttons-align-right"">
                <button type=""button"" id=""approvedBtn"" onclick=""approveEstimate();"" class=""btn btn-warning"">Approve Estimate </button>
                <button type=""button"" class=""btn btn-success"" style=""float:right;"" id=""AddPart"">Save</button>
");
                EndContext();
                BeginContext(8140, 28, true);
                WriteLiteral("            </div>\r\n        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8175, 931, true);
            WriteLiteral(@"
        <hr />
    </div>

    <br />
    <br />
    <div style=""max-height: 500px; overflow: auto;"">
        <table id=""PartsGrid"" class=""table table-advance"">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Qty</th>
                    <th>Unit Price</th>
                    <th>Price</th>
                    <th>Created By</th>
                    <th></th>
                </tr>
            </thead>

            <tbody id=""tblBodyPartsGrid""></tbody>
            <tfoot id=""tblBodyPartsTotals"" style=""background-color:white;""></tfoot>
        </table>
    </div>

    <br />
    <br />
    <div style=""display:none;"">

        <table id=""profitAndLostGrid"" class=""table table-advance""></table>
    </div>
    <div style=""display:none;"" id=""partsOutOfStock"" class=""warning"">

    </div>
    <hr />
");
            EndContext();
            BeginContext(9785, 22596, true);
            WriteLiteral(@"
    <div class=""emailPanel"" style=""display: none;"">
        <table>
            <tr>
                <td><span style=""color: #fff;"">Enter Email</span></td>
                <td>
                    <input type=""text"" name=""EstimateEmail"" id=""EstimateEmail"" style=""width: 245px;"" />
                </td>
                <td>
                    <button type=""button"" onclick=""SendEstimate($('#EstimateNumber').val())"" id=""btnSendEstimateEmail"" class=""btn btn-success"">Send</button>
                </td>
            </tr>
        </table>
    </div>
</div>


<script>
    $(document).ready(function () {

        $('#laborOrPartCost').parents('tr').fadeOut();

        $('#HidePartPanel').click(function () {
    /*$('#PartsPanel').slideToggle(500);*/ ClearInvoiceForm();
        });

        $('#PartType').change(function () {
            var v = $(this).val();
            // $('#lblPartPrice').html("""");
            $('#sellingPrice').val("""");
            if ($(this).val() == '4') {
     ");
            WriteLiteral(@"           $('#PartDescription').parents('tr').hide();
                $('#Name').parents('tr').fadeOut();
                $('#partsMarkup').parents('tr').fadeOut();
                $('#partsDiscount').parents('tr').fadeOut();
                $('#laborOrPartCost').parents('tr').hide();
                // $('#PartPofit').parents('tr').hide();
                $('.profitOnParts').hide();
                $('.sellingPrice').hide();
                $('#NewPartCost').parents('tr').hide();
                $('#TripCost').parents('tr').fadeIn();
                $('#OtherCost').parents('tr').hide();
            }
            else if ($(this).val() == '1') {
                $('#PartDescription').parents('tr').hide();
                $('#Name').parents('tr').fadeIn();
                $('#partsMarkup').parents('tr').fadeIn();
                $('#partsDiscount').parents('tr').fadeIn();
                $('#laborOrPartCost').parents('tr').hide();
                $('#TripCost').parents('tr').hide();
        ");
            WriteLiteral(@"        $('#OtherCost').parents('tr').hide();
            }
            else if ($(this).val() == '2') {
                $('#partsMarkup').parents('tr').fadeOut();
                $('#partsDiscount').parents('tr').fadeOut();
                $('#PartDescription').parents('tr').hide();
                $('#Name').parents('tr').fadeIn();
                $('#laborOrPartCost').parents('tr').show();
                $('.sellingPrice').hide();
                $('#NewPartCost').parents('tr').hide();
                $('#TripCost').parents('tr').hide(); $('#OtherCost').parents('tr').hide();
                //  GetCustomerMarkupAndDiscount();
                $('#TripCost').parents('tr').hide();
                $('#OtherCost').parents('tr').hide();
            }

            else {
                $('#laborOrPartCost').parents('tr').hide();
                $('#PartDescription').parents('tr').hide();
                $('#Name').parents('tr').fadeIn();
                $('#partsMarkup').parents('tr').fadeOu");
            WriteLiteral(@"t();
                $('#partsDiscount').parents('tr').fadeOut();
                // $('#PartPofit').parents('tr').hide();
                $('.profitOnParts').hide();
                $('.sellingPrice').hide();
                $('#NewPartCost').parents('tr').hide();
                $('#TripCost').parents('tr').hide();
                $('#OtherCost').parents('tr').fadeIn();

            }
        });

    });

    // load Part details on name selection
    function StopPosting(e) {

        var searchModel = {
            OfficeId: parseInt($('#OfficeIds').val()),
        };
        e.data = searchModel;

        if ($('#PartType').val() != ""1"") {
            return false;
        }
        return true;
    }




    //$('#ShowPartPanel').click(function () {
    //    $('#PartsPanel').slideToggle(500);
    //    $('#PartDescription').parents('tr').hide();
    //    $('.profitOnParts').hide();
    //    $('.purchasePrice').hide();
    //    $('.sellingPrice').hide();
    //  ");
            WriteLiteral(@"  ClearInvoiceForm();
    //});
    //$('#HidePartPanel').click(function () {
    //    $('#PartsPanel').slideToggle(500); ClearInvoiceForm();
    //});

    $('#partsMarkup').focusout(function () {
        ProfitCalculations();
    });
    $('#partsDiscount').focusout(function () {
        ProfitCalculations();
    });
    $('#laborOrPartCost').focusout(function () {
        ProfitCalculations();
    });
    $('#PartPrice').focusout(function () {
        ProfitCalculations();
    });
    $('#PartQuantity').focusout(function () {
        ProfitCalculations();
    });

    function CreateEditEstimate(estNum, edit) {
        $('#newEstimate').dialog({
            title: 'Create Estimate',
            resizable: true,
            width: 680,
            height: $(window).height() - 40,
            modal: true,
            buttons: [{
                text: ""Submit For Review"",
                id: ""reviewEstimates"",
                click: function () {
                    reviewEst");
            WriteLiteral(@"imates($('#EstimateNumber').val());
                }
            },
            {
                text: ""Create PO By Estimate"",
                id: ""CreatePOButton"",
                click: function () {
                    PurchaseOrderByEstimate($('#EstimateNumber').val());
                }
            }, {
                text: ""Email"",
                id: ""emailEstimate"",
                //click: function () {
                //    $(this).dialog(""destroy"");
                //}
            }, {
                text: ""Print"",
                id: ""printEstimate"",
                click: function () {
                    RedirectToEstimate($('#EstimateNumber').val());
                }
            }
            ],
            close: function (event, ui) {
                ClearInvoiceForm();
                $(this).dialog('destroy');
            },
            open: function () {
                if (edit == true) {
                    GetPartsByCallSlipId(estNum);
              ");
            WriteLiteral(@"      $('#btnEstLbl').show();
                }
                else {
                    $('#profitAndLostGrid').html("""");
                    $('#tblBodyPartsGrid').html("""");
                    $('#tblBodyPartsTotals').html("""");
                    $('#estimateLabel').val("""");
                    $('#btnEstLbl').hide();
                }
                $(""#EstimateNumber"").val(estNum);

                $('#reviewEstimates').removeAttr(""class"");
                $('#reviewEstimates').addClass(""btn btn-warning"");
                $('#CreatePOButton').removeAttr(""class"");
                $('#CreatePOButton').addClass(""btn btn-primary"");
                $('#emailEstimate').removeAttr(""class"");
                $('#emailEstimate').addClass(""btn btn-primary"");
                $('#printEstimate').removeAttr(""class"");
                $('#printEstimate').addClass(""btn btn-primary"");
            }
        });
    }

    function ProfitCalculations() {

        // profitCalculationOnEstimate()");
            WriteLiteral(@";
        var jobPartId = $('#PartIdOfEstimate').val();
        if (jobPartId != null && jobPartId != """") {
            var type = $('#PartType').val();
            if (type == '1') {
                partProfitCalculations(jobPartId);
            }
            else
                if (type == '2') {
                    laborProfitCalculations(jobPartId);
                }

        }
        else {
            var type = $('#PartType').val();

            if (type == '1') {
                AddPartProfitCalculations();
            }
            else
                if (type == '2') {
                    AddLaborProfitCalculations();
                }
        }
    }

    function approveEstimate() {
        var request = { EstNo: $('#EstimateNumber').val(), JobId: $(""#CallSlipId"").val() };
        $.ajax({
            type: ""POST"",
            contentType: ""application/json, charset=utf-8"",
            url: baseURL + ""Home/ApproveEstimate"",
            data: JSON.stringify(reques");
            WriteLiteral(@"t),
            global: false,
            cache: false,
            success: function (msg) {
                Notify(""Estiamte approved"", ""success"");
                GetPartsDetailsByCallSlipId();
                $('#approvedBtn').val(""Approved"");
                $('#approvedBtn').removeAttr(""class"");
                $('#approvedBtn').addClass(""btn btn-success"");
                $('#approvedBtn').prop(""disabled"", true);
            },
            error: function () {
                CommunicationError();
            }
        });
    }

    //--------------Profit Calculations for Part on add---------------------------


    function AddPartProfitCalculations() {
        var found = $('#lblPartFound').text();

        if (found == ""Yes"") {
            var aptaPrice = parseFloat($('#APTAPrice').val());
            var markup = $('#partsMarkup').val();
            var discount = $('#partsDiscount').val();
            var quantity = $(""#PartQuantity"").val();
            var purchasePr");
            WriteLiteral(@"ice = $('#purchasePrice').val();

            var sellingPrice = aptaPrice / (1 - (parseFloat(markup) / 100));
            var markupPrice = (markup / 100) * purchasePrice;
            var totalMarkup = markupPrice + parseFloat(purchasePrice);
            var discountPrice = (discount / 100) * totalMarkup;

            sellingPrice = sellingPrice - discountPrice;
            if (sellingPrice != null && !isNaN(sellingPrice)) {
                // $('#lblPartPrice').html(""*("" + sellingPrice.toFixed(2) + "")"");
                $('#sellingPrice').val(sellingPrice.toFixed(2));
            }

            var profit = sellingPrice - aptaPrice;
            var totalProfit = profit * parseFloat(quantity);
            if (totalProfit != null && !isNaN(totalProfit)) {
                $('#PartPofit').val(totalProfit.toFixed(2));
                // $('#PartPofit').parents('tr').show();
                $('.profitOnParts').show();
            }
        }
        else {

            var markup = $('#part");
            WriteLiteral(@"sMarkup').val();
            var discount = $('#partsDiscount').val();
            var quantity = $(""#PartQuantity"").val();
            var newPartCost = parseFloat($('#NewPartCost').val());

            var sellingPrice = newPartCost / (1 - (parseFloat(markup) / 100));
            var markupPrice = (markup / 100) * newPartCost;
            var totalMarkup = markupPrice + parseFloat(newPartCost);
            var discountPrice = (discount / 100) * totalMarkup;

            sellingPrice = sellingPrice - discountPrice;
            if (sellingPrice != null && !isNaN(sellingPrice)) {
                // $('#lblPartPrice').html(""*("" + sellingPrice.toFixed(2) + "")"");
                $('#sellingPrice').val(sellingPrice.toFixed(2));
            }

            var profit = sellingPrice - newPartCost;
            var totalProfit = profit * parseFloat(quantity);
            if (totalProfit != null && !isNaN(totalProfit)) {
                $('#PartPofit').val(totalProfit.toFixed(2));
                // ");
            WriteLiteral(@"$('#PartPofit').parents('tr').show();
                $('.profitOnParts').show();
            }

        }
    }
    //--------------Profit Calculations for Labor on add---------------------------
    function AddLaborProfitCalculations() {

        var laborCost = parseFloat($(""#laborOrPartCost"").val());
        var unitPrice = parseFloat($('#PartPrice').val());
        var quantity = parseFloat($(""#PartQuantity"").val());

        //var laborTotal = quantity * laborCost;
        var total = quantity * unitPrice;
        var profit = parseFloat(total) - laborCost;
        if (profit != null && !isNaN(profit)) {
            $('#PartPofit').val(profit.toFixed(2));
            // $('#PartPofit').parents('tr').show();
            $('.profitOnParts').show();
        }


    }
    //--------------Profit Calculations for Labor on edit---------------------------
    function laborProfitCalculations(jobPartId) {

        var oldProfit = $(""#profitLoss"" + jobPartId).children('td:nth-child(7)'");
            WriteLiteral(@").text();
        var quantity = $(""#PartQuantity"").val();
        var oldPartTotal = parseFloat($(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text());
        var laborCost = parseFloat($(""#laborOrPartCost"").val());
        var unitPrice = parseFloat($('#PartPrice').val());
        if (quantity != null && quantity != """" && !isNaN(quantity)) {
            $(""#profitLoss"" + jobPartId).children('td:nth-child(3)').text(quantity);
        }
        if (laborCost != null && !isNaN(laborCost)) {
            $(""#profitLoss"" + jobPartId).children('td:nth-child(2)').text(laborCost.toFixed(2));
            var oldTotalPrice = parseFloat($('#profitLossTotalProfit').children('td:nth-child(6)').text());
            var oldTotal = parseFloat($(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text());
            var newTotal = oldTotalPrice - oldTotal;
            //var total = parseFloat(quantity) * laborCost;
            newTotal += laborCost;
            if (newTotal != null && !isNaN(new");
            WriteLiteral(@"Total)) {
                $('#profitLossTotalProfit').children('td:nth-child(6)').text(newTotal.toFixed(2));
            }
            $(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text(laborCost.toFixed(2));

        }
        var oldTotalProfit = parseFloat($('#profitLossTotalProfit').children('td:nth-child(7)').text());
        var totalPrice = parseFloat(quantity) * parseFloat(unitPrice);
        //var totalLabor = parseFloat(quantity) * laborCost;
        var newProfit = totalPrice - laborCost;
        if (newProfit != null && !isNaN(newProfit)) {
            $(""#profitLoss"" + jobPartId).children('td:nth-child(7)').text(newProfit.toFixed(2));
            $('#PartPofit').val(newProfit.toFixed(2));
        }

        var newTotalProfit = oldTotalProfit - parseFloat(oldProfit);
        newTotalProfit += parseFloat(newProfit);
        if (newTotalProfit != null && !isNaN(newTotalProfit)) {
            $('#profitLossTotalProfit').children('td:nth-child(7)').text(newTotalProfit.toF");
            WriteLiteral(@"ixed(2));
        }


    }

    //--------------Profit Calculations for Part on edit---------------------------
    function partProfitCalculations(jobPartId) {
        var found = $('#lblPartFound').text();

        // if part present in database
        if (found == ""Yes"") {
            var oldProfit = $(""#profitLoss"" + jobPartId).children('td:nth-child(7)').text();
            var oldMarkup = $(""#profitLoss"" + jobPartId).children('td:nth-child(4)').text();
            var oldPartTotal = parseFloat($(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text());
            var aptaPrice = parseFloat($('#APTAPrice').val());
            var markup = $('#partsMarkup').val();
            var sellingPrice = aptaPrice / (1 - (parseFloat(markup) / 100));

            $(""#profitLoss"" + jobPartId).children('td:nth-child(4)').text(markup + ""%"");
            var discount = $('#partsDiscount').val();
            $(""#profitLoss"" + jobPartId).children('td:nth-child(5)').text(discount + ""%"");
    ");
            WriteLiteral(@"        var unitPrice = $(""#profitLoss"" + jobPartId).children('td:nth-child(2)').text();
            var quantity = $(""#PartQuantity"").val();
            if (quantity != null && !isNaN(quantity)) {
                $(""#profitLoss"" + jobPartId).children('td:nth-child(3)').text(quantity);
                var oldTotalPrice = parseFloat($('#profitLossTotalProfit').children('td:nth-child(6)').text());
                var oldTotal = parseFloat($(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text());
                var newTotal = oldTotalPrice - oldTotal;

                var total = parseFloat(quantity) * parseFloat(unitPrice);
                newTotal += total;
                if (newTotal != null && !isNaN(newTotal)) {
                    $('#profitLossTotalProfit').children('td:nth-child(6)').text(newTotal.toFixed(2));
                }
                $(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text(total.toFixed(2));
            }
            var oldTotalProfit = parseFloat");
            WriteLiteral(@"($('#profitLossTotalProfit').children('td:nth-child(7)').text());
            var totalPrice = parseFloat(quantity) * parseFloat(unitPrice);
            var markupAmount = (parseFloat(markup) / 100) * parseFloat(unitPrice);
            var totalMarkup = markupAmount + parseFloat(unitPrice);
            var discountAmount = (parseFloat(discount) / 100) * totalMarkup;
            sellingPrice = sellingPrice - discountAmount;

            if (sellingPrice != null && !isNaN(sellingPrice)) {
                // $('#lblPartPrice').html(""*("" + sellingPrice.toFixed(2) + "")"");
                $('#sellingPrice').val(sellingPrice.toFixed(2));
            }
            var newProfit = (sellingPrice - aptaPrice) * parseFloat(quantity);
            if (newProfit != null && !isNaN(newProfit)) {
                $(""#profitLoss"" + jobPartId).children('td:nth-child(7)').text(newProfit.toFixed(2));
            }
            $('#PartPofit').val(newProfit.toFixed(2));

            var newTotalProfit = oldTotalProfi");
            WriteLiteral(@"t - parseFloat(oldProfit);
            newTotalProfit += parseFloat(newProfit);
            $('#profitLossTotalProfit').children('td:nth-child(7)').text(newTotalProfit.toFixed(2));
        }
        // if part not present in database
        else {
            var oldProfit = $(""#profitLoss"" + jobPartId).children('td:nth-child(7)').text();
            var oldMarkup = $(""#profitLoss"" + jobPartId).children('td:nth-child(4)').text();
            var oldPartTotal = parseFloat($(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text());
            // var aptaPrice = parseFloat($('#APTAPrice').val());
            var newPartCoct = parseFloat($('#NewPartCost').val());
            var markup = $('#partsMarkup').val();
            var sellingPrice = newPartCoct / (1 - (parseFloat(markup) / 100));

            $(""#profitLoss"" + jobPartId).children('td:nth-child(4)').text(markup + ""%"");
            var discount = $('#partsDiscount').val();
            $(""#profitLoss"" + jobPartId).children('td:nth-c");
            WriteLiteral(@"hild(5)').text(discount + ""%"");
            var unitPrice = $(""#profitLoss"" + jobPartId).children('td:nth-child(2)').text();
            var quantity = $(""#PartQuantity"").val();
            if (quantity != null && !isNaN(quantity)) {
                $(""#profitLoss"" + jobPartId).children('td:nth-child(3)').text(quantity);
                var oldTotalPrice = parseFloat($('#profitLossTotalProfit').children('td:nth-child(6)').text());
                var oldTotal = parseFloat($(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text());
                var newTotal = oldTotalPrice - oldTotal;

                var total = parseFloat(quantity) * parseFloat(unitPrice);
                newTotal += total;
                if (newTotal != null && !isNaN(newTotal)) {
                    $('#profitLossTotalProfit').children('td:nth-child(6)').text(newTotal.toFixed(2));
                }
                $(""#profitLoss"" + jobPartId).children('td:nth-child(6)').text(total.toFixed(2));
            }
      ");
            WriteLiteral(@"      var oldTotalProfit = parseFloat($('#profitLossTotalProfit').children('td:nth-child(7)').text());
            var totalPrice = parseFloat(quantity) * parseFloat(unitPrice);
            var markupAmount = (parseFloat(markup) / 100) * parseFloat(unitPrice);
            var totalMarkup = markupAmount + parseFloat(unitPrice);
            var discountAmount = (parseFloat(discount) / 100) * totalMarkup;
            sellingPrice = sellingPrice - discountAmount;

            if (sellingPrice != null && !isNaN(sellingPrice)) {
                // $('#lblPartPrice').html(""*("" + sellingPrice.toFixed(2) + "")"");
                $('#sellingPrice').val(sellingPrice.toFixed(2));
            }
            var newProfit = (sellingPrice - newPartCoct) * parseFloat(quantity);
            if (newProfit != null && !isNaN(newProfit)) {
                $(""#profitLoss"" + jobPartId).children('td:nth-child(7)').text(newProfit.toFixed(2));
            }
            $('#PartPofit').val(newProfit.toFixed(2));

       ");
            WriteLiteral(@"     var newTotalProfit = oldTotalProfit - parseFloat(oldProfit);
            newTotalProfit += parseFloat(newProfit);
            $('#profitLossTotalProfit').children('td:nth-child(7)').text(newTotalProfit.toFixed(2));
        }

    }


    function profitCalculationOnEstimate() {

        var aptaPrice = parseFloat($('#APTAPrice').val());
        var purchasePrice = parseFloat($('#purchasePrice').val());
        var marginPercentage = parseFloat($('#partsMarkup').val());
        var discount = parseFloat($('#partsDiscount').val());
        if (aptaPrice != null && !isNaN(aptaPrice) && marginPercentage != null && marginPercentage != """" && !isNaN(marginPercentage)) {
            var sellingPrice = aptaPrice / (1 - (marginPercentage / 100));
            var marginPrice = (marginPercentage / 100) * purchasePrice;
            marginPrice += purchasePrice;
            var discountPrice = (discount / 100) * marginPrice;
            sellingPrice = sellingPrice - discountPrice;

            //$");
            WriteLiteral(@"('#lblPartPrice').html(""*("" + sellingPrice.toFixed(2) + "")"");
            $('#PartPrice').val(sellingPrice.toFixed(2));
            var profit = sellingPrice - aptaPrice;
            if (profit != null && !isNaN(profit) && profit != """") {
                $('#PartPofit').val(profit.toFixed(2));
            }
        }

    }


    function ClearInvoiceForm() {
        $('#PartType').val(""1"");
        $('#Name').val("""");
        $('#PartDescription').val("""");
        $('#PartPrice').val("""");
        $('#PartQuantity').val("""");
        $('#PartIdOfEstimate').val("""");
        $('#partsMarkup').val('');
        $('#partsDiscount').val('');
        $('#purchasePrice').val('');
        $('#sellingPrice').val('');
        $('#PartPofit').val('');
    }
    $('#emailEstimate').click(function () {
        {
            $('.emailPanel').slideToggle(500);
        }
    });
    $('#btnSendEmail').click(function () {
        {
            Notify('Invoice forwarded succesfully.', 'success'); $");
            WriteLiteral("(\'.emailPanel\').slideToggle(500);\r\n        }\r\n    });\r\n\r\n\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
